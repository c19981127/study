/* Auto-generated by genmsg_cpp for file /home/chengpipi/workspace/ROS/chatpter2_tutorials/srv/chapter2_srv1.srv */
#ifndef CHATPTER2_TUTORIALS_SERVICE_CHAPTER2_SRV1_H
#define CHATPTER2_TUTORIALS_SERVICE_CHAPTER2_SRV1_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace chatpter2_tutorials
{
template <class ContainerAllocator>
struct chapter2_srv1Request_ {
  typedef chapter2_srv1Request_<ContainerAllocator> Type;

  chapter2_srv1Request_()
  : A(0)
  , B(0)
  , C(0)
  {
  }

  chapter2_srv1Request_(const ContainerAllocator& _alloc)
  : A(0)
  , B(0)
  , C(0)
  {
  }

  typedef int32_t _A_type;
  int32_t A;

  typedef int32_t _B_type;
  int32_t B;

  typedef int32_t _C_type;
  int32_t C;


  typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator>  const> ConstPtr;
}; // struct chapter2_srv1Request
typedef  ::chatpter2_tutorials::chapter2_srv1Request_<std::allocator<void> > chapter2_srv1Request;

typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Request> chapter2_srv1RequestPtr;
typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Request const> chapter2_srv1RequestConstPtr;



template <class ContainerAllocator>
struct chapter2_srv1Response_ {
  typedef chapter2_srv1Response_<ContainerAllocator> Type;

  chapter2_srv1Response_()
  : sum(0)
  {
  }

  chapter2_srv1Response_(const ContainerAllocator& _alloc)
  : sum(0)
  {
  }

  typedef int32_t _sum_type;
  int32_t sum;


  typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator>  const> ConstPtr;
}; // struct chapter2_srv1Response
typedef  ::chatpter2_tutorials::chapter2_srv1Response_<std::allocator<void> > chapter2_srv1Response;

typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Response> chapter2_srv1ResponsePtr;
typedef boost::shared_ptr< ::chatpter2_tutorials::chapter2_srv1Response const> chapter2_srv1ResponseConstPtr;


struct chapter2_srv1
{

typedef chapter2_srv1Request Request;
typedef chapter2_srv1Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct chapter2_srv1
} // namespace chatpter2_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e7a68ce4e0b75a9719b4950a7069c9d4";
  }

  static const char* value(const  ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe7a68ce4e0b75a97ULL;
  static const uint64_t static_value2 = 0x19b4950a7069c9d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "chatpter2_tutorials/chapter2_srv1Request";
  }

  static const char* value(const  ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 A\n\
int32 B\n\
int32 C\n\
\n\
";
  }

  static const char* value(const  ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0ba699c25c9418c0366f3595c0c8e8ec";
  }

  static const char* value(const  ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0ba699c25c9418c0ULL;
  static const uint64_t static_value2 = 0x366f3595c0c8e8ecULL;
};

template<class ContainerAllocator>
struct DataType< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "chatpter2_tutorials/chapter2_srv1Response";
  }

  static const char* value(const  ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 sum\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.A);
    stream.next(m.B);
    stream.next(m.C);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct chapter2_srv1Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sum);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct chapter2_srv1Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<chatpter2_tutorials::chapter2_srv1> {
  static const char* value() 
  {
    return "2a5c7a37218262bae4fcfaa1007692aa";
  }

  static const char* value(const chatpter2_tutorials::chapter2_srv1&) { return value(); } 
};

template<>
struct DataType<chatpter2_tutorials::chapter2_srv1> {
  static const char* value() 
  {
    return "chatpter2_tutorials/chapter2_srv1";
  }

  static const char* value(const chatpter2_tutorials::chapter2_srv1&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2a5c7a37218262bae4fcfaa1007692aa";
  }

  static const char* value(const chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "chatpter2_tutorials/chapter2_srv1";
  }

  static const char* value(const chatpter2_tutorials::chapter2_srv1Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2a5c7a37218262bae4fcfaa1007692aa";
  }

  static const char* value(const chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "chatpter2_tutorials/chapter2_srv1";
  }

  static const char* value(const chatpter2_tutorials::chapter2_srv1Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CHATPTER2_TUTORIALS_SERVICE_CHAPTER2_SRV1_H

